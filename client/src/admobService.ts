
import { AdMob, BannerAdOptions, BannerAdSize, BannerAdPosition, AdMobBannerSize, InterstitialAdPluginEvents, AdMobError } from '@capacitor-community/admob';
import { Capacitor } from '@capacitor/core';

const isNative = Capacitor.isNativePlatform();

// ‚ö†Ô∏è REMPLACE CES IDs PAR TES VRAIS IDs ADMOB
// Va sur https://admob.google.com pour les obtenir
const BANNER_AD_ID = isNative 
  ? 'ca-app-pub-XXXXXXXXXXXXXXXX/XXXXXXXXXX'  // TON ID banni√®re
  : '';

const INTERSTITIAL_AD_ID = isNative
  ? 'ca-app-pub-XXXXXXXXXXXXXXXX/XXXXXXXXXX'  // TON ID interstitielle
  : '';

export async function initialize() {
  if (!isNative) {
    console.log('üì± AdMob ignor√© (pas sur mobile natif)');
    return;
  }

  try {
    await AdMob.initialize({
      requestTrackingAuthorization: true,
      testingDevices: ['YOUR_DEVICE_ID_HERE'],
      initializeForTesting: true,
    });
    console.log('‚úÖ AdMob initialis√©');
  } catch (error) {
    console.error('‚ùå Erreur init AdMob:', error);
  }
}

export async function showBanner() {
  if (!isNative) return;

  try {
    const options: BannerAdOptions = {
      adId: BANNER_AD_ID,
      adSize: BannerAdSize.ADAPTIVE_BANNER,
      position: BannerAdPosition.BOTTOM_CENTER,
      margin: 0,
    };

    await AdMob.showBanner(options);
    console.log('‚úÖ Banni√®re affich√©e');
  } catch (error) {
    console.error('‚ùå Erreur banni√®re:', error);
  }
}

export async function hideBanner() {
  if (!isNative) return;

  try {
    await AdMob.hideBanner();
    console.log('üëÅÔ∏è Banni√®re cach√©e');
  } catch (error) {
    console.error('‚ùå Erreur hide banni√®re:', error);
  }
}

export async function removeBanner() {
  if (!isNative) return;

  try {
    await AdMob.removeBanner();
    console.log('üóëÔ∏è Banni√®re supprim√©e');
  } catch (error) {
    console.error('‚ùå Erreur remove banni√®re:', error);
  }
}

export async function prepareInterstitial() {
  if (!isNative) return;

  try {
    await AdMob.prepareInterstitial({
      adId: INTERSTITIAL_AD_ID,
    });
    console.log('‚úÖ Interstitielle pr√©par√©e');
  } catch (error) {
    console.error('‚ùå Erreur pr√©paration interstitielle:', error);
  }
}

export async function showInterstitial() {
  if (!isNative) return;

  try {
    await AdMob.showInterstitial();
    console.log('‚úÖ Interstitielle affich√©e');
  } catch (error) {
    console.error('‚ùå Erreur affichage interstitielle:', error);
  }
}

export async function showInterstitialAd() {
  if (!isNative) {
    console.log('üì± Pas de pub (web)');
    return;
  }

  try {
    console.log('üì∫ Pr√©paration de la pub interstitielle...');
    
    await AdMob.prepareInterstitial({
      adId: INTERSTITIAL_AD_ID,
    });

    // Attendre un peu que la pub soit pr√™te
    await new Promise(resolve => setTimeout(resolve, 1000));

    const result = await AdMob.showInterstitial();
    console.log('‚úÖ Pub interstitielle affich√©e', result);
  } catch (error: any) {
    console.error('‚ùå Erreur pub interstitielle:', error);
    
    // Si l'erreur est "Ad is not ready", on r√©essaye
    if (error?.message?.includes('not ready')) {
      console.log('‚è≥ Pub pas pr√™te, nouvelle tentative...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      try {
        await AdMob.showInterstitial();
      } catch (retryError) {
        console.error('‚ùå √âchec apr√®s r√©essai:', retryError);
      }
    }
  }
}
